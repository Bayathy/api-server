package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"

	"github.com/bayathy/api-server/cmd/db"
	"github.com/bayathy/api-server/cmd/entity"
	"github.com/bayathy/api-server/graph"
	"github.com/bayathy/api-server/graph/model"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input *model.NewArticle) (*model.Article, error) {
	record := entity.Article{
		Title:  input.Title,
		Url:    input.URL,
		Done:   false,
		UserId: input.UserID,
	}
	if err := r.DB.Create(&record).Error; err != nil {
		return nil, err
	}
	res := db.ConvertArticle(&record)

	return res, nil
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, input *model.UpdateArticle) (*model.Article, error) {
	record := entity.Article{
		Id:   input.ID,
		Done: input.Done,
	}

	if err := r.DB.Model(&record).Where("id + ?", record.Id).Update("id", record.Done).Error; err != nil {
		return nil, err
	}

	res := db.ConvertArticle(&record)

	return res, nil
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, input *model.ArticleIDInput) (*model.Article, error) {
	record := entity.Article{Id: input.ID}
	if err := r.DB.Delete(&record).Error; err != nil {
		return nil, err
	}
	res := db.ConvertArticle(&record)

	return res, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUser) (*model.User, error) {
	record := entity.User{
		Uuid: input.UUID,
	}
	if err := r.DB.Create(&record).Error; err != nil {
		return nil, err
	}

	res := db.ConvertUser(&record)

	return res, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
